
soru 1:

Eight things are there In how many ways can be ,taken 3 at a time?

solution :

8!/(8-3)! = 8!/5! = 336

Python sloution:

import itertools
my_list=(1,2,3,4,5,6,7,8)# n=8
permutations=itertools.permutations(my_list,3) # x=3. the length of permutation set is 3. the number of
# permutation will change as long as we change the values of n and x
count_permutations=[]
for i in permutations:
  count_permutations.append(i)
  print(count_permutations.index(i)+1,i)# count_permutations.index(i) it gives the count sequence number on the left
  #of the permutation sets
print('the number of permutations are',len(count_permutations))




Soru 2

Eight things are there In how many ways is it chosen?

sloution :

8!/(8-3)!*3! = 8*7 = 56



import itertools
my_list=(1,2,3,4,5,6,7,8)
combinations=itertools.combinations(my_list,3)
count_combinations=[]
for i in combinations:
  count_combinations.append(i)
  print(count_combinations.index(i)+1,i)
print('the number is',len(count_combinations))


python Explaination 

1.The code first imports the itertools library, which provides functions for creating iterators for efficient looping.

2.A tuple called "my_list" is defined with the values (1,2,3,4,5,6,7,8). This represents the set of numbers for which we want to generate permutations.

3.The itertools.permutations() function is called with two arguments: the set of numbers (my_list), and the length of each permutation (3). This means that the function will generate all possible permutations of length 3 using the numbers in my_list.

4.The permutations generated by the itertools.permutations() function are stored in a list called "count_permutations".

5.The code then iterates over the elements of count_permutations using a for loop. In each iteration, the current permutation is added to the count_permutations list using the append() function. The index() function is then used to find the index of the current permutation in the count_permutations list, which represents its position in the list. The index of the permutation is printed along with the permutation itself.

6.Finally, the length of the count_permutations list is printed, which represents the total number of permutations generated by the itertools.permutations() function.

Overall, this code generates and prints all possible permutations of length 3 using the set of numbers (1,2,3,4,5,6,7,8).




